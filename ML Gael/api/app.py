# app.py

# --- Imports ---
import joblib
import pandas as pd
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import numpy as np

# --- Configuration et Chargement du Mod√®le ---

# Nom du fichier mod√®le (doit exister dans le m√™me r√©pertoire)
MODEL_PATH = 'modele_diabete_XX.pkl' 
# üö® N'oubliez pas de remplacer XX par vos initiales !

try:
    # Charger le pipeline complet (pr√©processeur + mod√®le)
    model_pipeline = joblib.load(MODEL_PATH)
    print(f"Mod√®le charg√© avec succ√®s depuis {MODEL_PATH}")
except FileNotFoundError:
    print(f"ERREUR: Le fichier mod√®le {MODEL_PATH} est introuvable. Assurez-vous de le placer dans le r√©pertoire de l'API.")
    # Permet √† l'application de d√©marrer m√™me sans mod√®le, mais toutes les requ√™tes /predict √©choueront.
    model_pipeline = None 

# Initialisation de l'API
app = FastAPI(
    title="API de Pr√©diction du Diab√®te",
    description="Service de classification bas√© sur un mod√®le RandomForest.",
    version="1.0.0"
)

# --- D√©finition du Sch√©ma de Donn√©es (Pydantic) ---

# Pydantic garantit que les donn√©es re√ßues correspondent √† ce format.
# Cela g√®re les "erreurs si une valeur manque ou est incorrecte" (Crit√®re de performance).
class PatientFeatures(BaseModel):
    age: int
    gender: int
    polyuria: int
    polydipsia: int
    sudden_weight_loss: int
    weakness: int
    polyphagia: int
    genital_thrush: int
    visual_blurring: int
    itching: int
    irritability: int
    delayed_healing: int
    partial_paresis: int
    muscle_stiffness: int
    alopecia: int
    obesity: int

# --- D√©finition des Endpoints ---

@app.get("/health")
def health_check():
    """
    Endpoint de sant√© pour v√©rifier si le service est op√©rationnel.
    """
    status = "ok" if model_pipeline else "error - model not loaded"
    return {"status": status, "model_loaded": model_pipeline is not None}

@app.post("/predict")
def predict_diabete(patient: PatientFeatures):
    """
    Re√ßoit les caract√©ristiques d'un patient et renvoie la pr√©diction de diab√®te.
    Les entr√©es binaires (Gender, Sympt√¥mes) doivent √™tre 0 (No/Female) ou 1 (Yes/Male).
    """
    if model_pipeline is None:
        raise HTTPException(status_code=503, detail="Service non disponible: Mod√®le de pr√©diction non charg√©.")

    try:
        # 1. Conversion des donn√©es Pydantic en DataFrame (format attendu par le pipeline)
        data = patient.model_dump()
        input_df = pd.DataFrame([data])
        
        # S'assurer que les colonnes sont dans le bon ordre (celui utilis√© lors de l'entra√Ænement)
        # Note: L'ordre des colonnes du mod√®le Pydantic doit correspondre aux colonnes du train set
        # L'ordre par d√©faut de Pydantic est l'ordre de d√©finition.
        
        # 2. Pr√©diction de probabilit√©
        proba = model_pipeline.predict_proba(input_df)[:, 1][0]
        score = float(proba) # Probabilit√© d'√™tre de classe Positive (diab√®te)
        
        # 3. D√©cision (Seuil de 0.5)
        prediction_binary = (score >= 0.5) * 1 # 1 si score >= 0.5, 0 sinon
        decision = "Positive" if prediction_binary == 1 else "Negative"
        
        # 4. Retour du r√©sultat
        return {
            "prediction": decision,
            "probability_positive": round(score, 4),
            "comment": "R√©sultat stable et reproductible car le mod√®le est fixe."
        }
        
    except Exception as e:
        # G√©rer les erreurs inattendues durant la pr√©diction (ex: mauvaise forme de donn√©es apr√®s l'√©tape Pydantic)
        print(f"Erreur de pr√©diction: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur interne de pr√©diction: {str(e)}")

# --- Commandes de Lancement (pour le README) ---
# Pour lancer l'API : uvicorn app:app --reload
# Port par d√©faut : http://127.0.0.1:8000
# Documentation Swagger : http://127.0.0.1:8000/docs